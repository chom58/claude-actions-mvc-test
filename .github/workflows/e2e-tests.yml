name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup test environment
        run: |
          # 環境変数を設定
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
          echo "BASE_URL=http://localhost:3000" >> $GITHUB_ENV
          echo "JWT_SECRET=test_secret" >> $GITHUB_ENV
          echo "SESSION_SECRET=test_session_secret" >> $GITHUB_ENV

      - name: Setup test database
        run: |
          # テスト用データベースのマイグレーション（必要に応じて）
          npm run seed || echo "No seed script found"

      - name: Start application server
        run: |
          # アプリケーションをバックグラウンドで起動
          npm start &
          # サーバーが起動するまで待機
          npx wait-on http://localhost:3000 --timeout 60000
        env:
          NODE_ENV: test
          PORT: 3000

      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          CI: true
          BASE_URL: http://localhost:3000

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}
          path: |
            test-results/
            !test-results/**/*.zip
          retention-days: 7

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: html-report-${{ matrix.browser }}
          path: test-results/html-report/
          retention-days: 7

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots-${{ matrix.browser }}
          path: test-results/screenshots/
          retention-days: 7

      - name: Comment PR with test results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && always()
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // テスト結果を読み込み
            let testResults = '';
            try {
              const resultsPath = path.join('test-results', 'results.json');
              if (fs.existsSync(resultsPath)) {
                const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
                const { stats } = results;
                
                testResults = `
                ## E2E Test Results (${{ matrix.browser }})
                
                - ✅ Passed: ${stats.passed || 0}
                - ❌ Failed: ${stats.failed || 0}
                - ⏭️ Skipped: ${stats.skipped || 0}
                - ⏱️ Duration: ${stats.duration || 'N/A'}ms
                
                ${stats.failed > 0 ? '❌ Some tests failed. Please check the detailed report.' : '✅ All tests passed!'}
                `;
              } else {
                testResults = `## E2E Test Results (${{ matrix.browser }})\n\n⚠️ Test results not found.`;
              }
            } catch (error) {
              testResults = `## E2E Test Results (${{ matrix.browser }})\n\n❌ Error reading test results: ${error.message}`;
            }
            
            // PR にコメント
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('E2E Test Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: testResults
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: testResults
              });
            }

  # パフォーマンステストジョブ
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install chromium

      - name: Start application server
        run: |
          npm start &
          npx wait-on http://localhost:3000 --timeout 60000
        env:
          NODE_ENV: production
          PORT: 3000

      - name: Run performance tests
        run: |
          # Lighthouseを使用したパフォーマンステスト
          npx lighthouse http://localhost:3000 \
            --output json \
            --output-path ./performance-results.json \
            --chrome-flags="--headless --no-sandbox" \
            --quiet
        continue-on-error: true

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: performance-results.json
          retention-days: 7

  # アクセシビリティテストジョブ
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: e2e-tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install chromium

      - name: Install axe-core
        run: npm install --save-dev @axe-core/playwright

      - name: Start application server
        run: |
          npm start &
          npx wait-on http://localhost:3000 --timeout 60000
        env:
          NODE_ENV: test
          PORT: 3000

      - name: Run accessibility tests
        run: |
          # 基本的なアクセシビリティテストを実行
          npx playwright test tests/e2e/accessibility --project=chromium
        continue-on-error: true
        env:
          BASE_URL: http://localhost:3000

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-results
          path: test-results/accessibility/
          retention-days: 7

  # テスト結果サマリー
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [e2e-tests, performance-tests, accessibility-tests]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create test summary
        run: |
          echo "# E2E Test Suite Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Browser Test Results" >> $GITHUB_STEP_SUMMARY
          
          for browser in chromium firefox webkit; do
            if [ -d "test-results-$browser" ]; then
              echo "### $browser" >> $GITHUB_STEP_SUMMARY
              echo "✅ Tests completed" >> $GITHUB_STEP_SUMMARY
            else
              echo "### $browser" >> $GITHUB_STEP_SUMMARY
              echo "❌ Tests failed or not run" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "## Additional Tests" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "performance-results" ]; then
            echo "- ✅ Performance tests completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Performance tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -d "accessibility-results" ]; then
            echo "- ✅ Accessibility tests completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Accessibility tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 Detailed reports are available in the artifacts section." >> $GITHUB_STEP_SUMMARY