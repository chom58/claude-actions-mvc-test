version: '3.8'

services:
  app:
    build: 
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - '3000:3000'
      - '9229:9229'  # Node.js デバッガーポート
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=mvc_dev
      - DB_USER=developer
      - DB_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=development_jwt_secret_key_minimum_32_chars
      - JWT_REFRESH_SECRET=development_refresh_secret_key_minimum_32_chars
      - MAIL_HOST=mailhog
      - MAIL_PORT=1025
    depends_on:
      - db
      - redis
      - mailhog
    restart: unless-stopped
    command: npm run dev
    
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: mvc_dev
      POSTGRES_USER: developer
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - '5432:5432'
    restart: unless-stopped
    
  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
      
  mailhog:
    image: mailhog/mailhog
    ports:
      - '1025:1025'  # SMTP
      - '8025:8025'  # Web UI
    restart: unless-stopped
    
  # 開発者ツール
  adminer:
    image: adminer:4.8.1
    ports:
      - '8080:8080'
    environment:
      ADMINER_DEFAULT_SERVER: db
    depends_on:
      - db
    restart: unless-stopped
    
  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - '8081:8081'
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: